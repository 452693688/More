apply plugin: 'com.android.application'

/* 多渠道打包一：
定义一个方法，仅def声明时，返回类型任意(自动判断)
   可以将返回值直接写成String 或def String
gradle支持groovy语言，groovy默认引入的包有：
  java.io.* java.lang.* java.math.BigDecimal java.math.BigInteger
  java.net.* java.util.* groovy.lang.* groovy.util.*
 */
//返回版本名
def String computeVersionName() {
    return "8.8.8"
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.0"

    defaultConfig {
        applicationId "app.gm.com.more"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName computeVersionName()
        //多渠道打包二:替换 manifest数据
        /*
         <meta-data
                android:name="UMENG_APPKEY"
                android:value="${YOUR_APP_KEY}" />
        */
        manifestPlaceholders = [GMTEST: "友盟后台的appkey", GM: "友盟后台的appkey"]
    }
    //多渠道打包三:签名文件
    signingConfigs {
        relealse {
            storeFile file("key")
            storePassword "hztywl"
            keyAlias "android_hztywl"
            keyPassword "hztywl"
        }
    }
    //多渠道打包四： 可以配置多个buildType项，如下面的release，debug，unSigningApk
    buildTypes {
        release {
            applicationIdSuffix ".WS"//applicationId的后缀
            versionNameSuffix ".正式版"//版本名或者
            minifyEnabled false  //译：使变小enabled。   即启用混淆器
            signingConfig signingConfigs.relealse
            zipAlignEnabled true    //混淆后的zip优化，默认为true，可不写。当不显示配置为true时，不会生成unaligned.apk
            //  proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true  //启用debug的buildType配置
        }
        unSigningApk {//自定义配置，未配置签名项，所以会生成未签名apk
            multiDexEnabled false
            debuggable false
        }
    }
    //多渠道打包五：
    //gradle build  gradlew assembleRelease gradle assembleRelease
    // F:\studio_code\More>gradlew assembleRelease 发布
    //gradlew assembledDebug      Debug
    //gradlew assembledUnSigningApk   未签名的apk
    productFlavors {
        /*
          productFlavors-产品风格：
                即不同产品的配置，它会基于上面的公共配置项defaultConfig
                下面的配置项与buildTypes{}中的配置项，成类似sql中的全联(full join)关系
                 当执行 $gradle build   命令后，会生成：
                    module-flavor1-release-unaligned.apk
                    module-flavor1-release.apk
                    module-flavor1-debug-unaligned.apk
                    module-flavor1-debug.apk
                    module-flavor1-aabbcc.apk
                    ...flavor2...apk

          applicationId 用于标识 在谷歌Play商店上的唯一标识 默认不配置，则与app的AndroidManifest.xml中的package一致
                仅替换<manifest>中的package属性值，其它不受影响

         */

        baiDu {
            proguardFiles 'proguard-rules.pro'
            applicationId "com.stone.baidu"
            manifestPlaceholders = [GMTEST: "百度应用平台", GM: "杭州"]
        }

        wangDouJia {
            proguardFiles 'proguard-rules.pro'
            applicationId "com.stone.wangdoujia"
            manifestPlaceholders = [GMTEST: "豌豆夹", GM: "九溪"]
        }
    }
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.0'
}
